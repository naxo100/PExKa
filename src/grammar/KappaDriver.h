/*
 * KappaDriver.h
 *
 *  Created on: Jan 8, 2016
 *      Author: naxo
 */

#ifndef GRAMMAR_KAPPADRIVER_H_
#define GRAMMAR_KAPPADRIVER_H_


#include <string>
#include <list>
#include <vector>
#include <fstream>
#include "ast/KappaAst.h"
#include "location.hh"
#include "kappa3/Lexer.h"
#include "kappa3/Parser.hpp"
#include "kappa4/Lexer.h"
#include "kappa4/Parser.hpp"

using namespace std;

/** \namespace grammar
 * \brief All the classes needed to parse the Kappa files and create the AST. */
namespace grammar {

/** \brief Used to generate the AST from Kappa files.
 *
 * After setting the Kappa files of the model, the method parse() will
 * use Kappa lexers and parsers to produce the Abstract Syntax Tree of
 * the Kappa-language statements.										*/
class KappaDriver {
	vector<string> files;		///< Kappa files of the model.
	string curr_file;			///< Name of the file currently being parsed.
	kappa3::Lexer lexer3;		///< Lexer for Kappa-language 3 ("*.kl3","*.ka3").
	kappa3::Parser parser3;		///< Parser for Kappa-language 3 ("*.kl3","*.ka3").
	kappa4::Lexer lexer4;		///< Lexer for Kappa-language 4 ("*.kl4","*.ka4").
	kappa4::Parser parser4;		///< Parser for Kappa-language 4 ("*.kl4","*.ka4").
	yy::location loc;			///< Currently pointer location of the parsed file.
	ast::KappaAst syntax_tree;	///< The Abstract Syntax Tree created by parse.

public:
	/** \brief Initialize a KappaDriver object with a vector of file names.
	 *
	 * After that, you must use the parse()
	 * method to read each file and store the Kappa AST internally.			*/
	KappaDriver(const vector<string> &files);

	/** \brief Construct an empty KappaDriver object.
	 *
	 * Then the parse() method will read a kappa model from
	 * stdin and store the kappa AST internally.			*/
	KappaDriver();

	/** \brief Destroy this object.	 */
	virtual ~KappaDriver();

	/** \brief Parse a kappa model from files or stdin.
	 *
	 *  After parsed the kappa AST is stored internally. */
	int parse();

	/** \brief Return next lexing symbol from lexer.	 */
	template <typename T>
	T getNextToken();

	/** \brief Return the name of the file currently being parsed.	*/
	const string* getCurrentFileName() const;

	/** \brief Return the current location of the file parser.	*/
	yy::location* getLocation();

	/** \brief Return the kappa AST generated by parse().	*/
	ast::KappaAst& getAst();
};

} /* namespace ast */

#endif /* GRAMMAR_KAPPADRIVER_H_ */
